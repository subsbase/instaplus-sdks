/**
 * InstaPlus.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("BanksApi", () => {
  let instance: api.BanksApi
  beforeEach(function() {
    instance = new api.BanksApi(config)
  });

  test("banksGet", () => {
    return expect(instance.banksGet({})).resolves.toBe(null)
  })
})

describe("GroupOrderApi", () => {
  let instance: api.GroupOrderApi
  beforeEach(function() {
    instance = new api.GroupOrderApi(config)
  });

  test("groupOrderGet", () => {
    return expect(instance.groupOrderGet({})).resolves.toBe(null)
  })
  test("groupOrderIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.groupOrderIdDelete(id, {})).resolves.toBe(null)
  })
  test("groupOrderIdGet", () => {
    const id: string = "id_example"
    return expect(instance.groupOrderIdGet(id, {})).resolves.toBe(null)
  })
  test("groupOrderPut", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.groupOrderPut(body, {})).resolves.toBe(null)
  })
})

describe("OrderApi", () => {
  let instance: api.OrderApi
  beforeEach(function() {
    instance = new api.OrderApi(config)
  });

  test("orderGet", () => {
    return expect(instance.orderGet({})).resolves.toBe(null)
  })
  test("orderIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.orderIdDelete(id, {})).resolves.toBe(null)
  })
  test("orderIdGet", () => {
    const id: string = "id_example"
    return expect(instance.orderIdGet(id, {})).resolves.toBe(null)
  })
  test("orderOrderIdLinkToPost", () => {
    const orderId: string = "orderId_example"
    const code: string = "code_example"
    return expect(instance.orderOrderIdLinkToPost(orderId, code, {})).resolves.toBe(null)
  })
  test("orderPut", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.orderPut(body, {})).resolves.toBe(null)
  })
})

describe("ReceivingAccountApi", () => {
  let instance: api.ReceivingAccountApi
  beforeEach(function() {
    instance = new api.ReceivingAccountApi(config)
  });

  test("receivingAccountGet", () => {
    return expect(instance.receivingAccountGet({})).resolves.toBe(null)
  })
  test("receivingAccountIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.receivingAccountIdDelete(id, {})).resolves.toBe(null)
  })
  test("receivingAccountIdGet", () => {
    const id: string = "id_example"
    return expect(instance.receivingAccountIdGet(id, {})).resolves.toBe(null)
  })
  test("receivingAccountPut", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.receivingAccountPut(body, {})).resolves.toBe(null)
  })
  test("receivingAccountReceivingAccountIdLinkToPost", () => {
    const receivingAccountId: string = "receivingAccountId_example"
    const code: string = "code_example"
    return expect(instance.receivingAccountReceivingAccountIdLinkToPost(receivingAccountId, code, {})).resolves.toBe(null)
  })
  test("receivingAccountTypesGet", () => {
    return expect(instance.receivingAccountTypesGet({})).resolves.toBe(null)
  })
})

describe("RuntimeConfigApi", () => {
  let instance: api.RuntimeConfigApi
  beforeEach(function() {
    instance = new api.RuntimeConfigApi(config)
  });

  test("runtimeConfigPost", () => {
    return expect(instance.runtimeConfigPost({})).resolves.toBe(null)
  })
})

describe("TransactionReceiptApi", () => {
  let instance: api.TransactionReceiptApi
  beforeEach(function() {
    instance = new api.TransactionReceiptApi(config)
  });

  test("transactionReceiptGet", () => {
    return expect(instance.transactionReceiptGet({})).resolves.toBe(null)
  })
  test("transactionReceiptLiveGet", () => {
    return expect(instance.transactionReceiptLiveGet({})).resolves.toBe(null)
  })
  test("transactionReceiptPut", () => {
    return expect(instance.transactionReceiptPut({})).resolves.toBe(null)
  })
  test("transactionReceiptReferenceGet", () => {
    const reference: string = "reference_example"
    return expect(instance.transactionReceiptReferenceGet(reference, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("userLoginPost", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.userLoginPost(body, {})).resolves.toBe(null)
  })
  test("userPasswordPut", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.userPasswordPut(body, {})).resolves.toBe(null)
  })
  test("userSignupPost", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.userSignupPost(body, {})).resolves.toBe(null)
  })
})

describe("WebhookApi", () => {
  let instance: api.WebhookApi
  beforeEach(function() {
    instance = new api.WebhookApi(config)
  });

  test("webhookEventsGet", () => {
    return expect(instance.webhookEventsGet({})).resolves.toBe(null)
  })
  test("webhookGet", () => {
    return expect(instance.webhookGet({})).resolves.toBe(null)
  })
  test("webhookIdDelete", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.webhookIdDelete(id, {})).resolves.toBe(null)
  })
  test("webhookIdGet", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.webhookIdGet(id, {})).resolves.toBe(null)
  })
  test("webhookIdLogsGet", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.webhookIdLogsGet(id, {})).resolves.toBe(null)
  })
  test("webhookPut", () => {
    const body: { [key: string]: JToken; } = undefined
    return expect(instance.webhookPut(body, {})).resolves.toBe(null)
  })
})

