name: NuGet Package CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore: 
      - .github/**
  release:
    types:
      - published

jobs:
  build-and-publish-pre-release:
    name: Build and Publish Pre-Release Package
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          fetch-tags: 'true'

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x' # Adjust as needed

      - name: Restore dependencies
        run: dotnet restore ./dotnet/Instaplus.Net/

      - name: Get Latest Release
        id: get-latest-release
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          latest_release=$(gh release view --json tagName -q '.tagName' || echo "")
          
          if [ -z "$latest_release" ]; then
            latest_release='v1.0.0';
          fi

          echo latest-release="$latest_release" >> $GITHUB_OUTPUT

      - name: Set release type based on commit messages
        id: release-type
        env:
          LATEST_TAG: ${{ steps.get-latest-release.outputs.latest-release }}
        run: |
          release_type="Patch"

          if git rev-parse "$LATEST_TAG" >/dev/null 2>&1; then
            commit_messages=$(git log $LATEST_TAG...master --no-merges --pretty='format:%s')
          else
            echo "Tag $LATEST_TAG does not exist. Using entire branch history."
            commit_messages=$(git log --no-merges --pretty='format:%s')
          fi

          while IFS= read -r line; do
            # Convert the line to lowercase
            line_lower=$(echo "$line" | tr '[:upper:]' '[:lower:]')

            if [[ "$line_lower" == release/* ]]; then
              release_type="Major";
              break;
            elif [[ "$line_lower" == feature/* ]]; then
              release_type="Minor";
              break;
            elif [[ "$line_lower" == hotfix/* ]]; then
              release_type="Patch";
            fi
          done <<< "$commit_messages";

          echo release-type="$release_type" >> $GITHUB_OUTPUT

      - name: Set Release Version 
        id: release-version
        env: 
          LATEST_TAG: ${{ steps.get-latest-release.outputs.latest-release }}
          RELEASE_TYPE: ${{ steps.release-type.outputs.release-type }}
        run: |
          latest_tag="$LATEST_TAG"
          version="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$version"
          
          if [[ "$RELEASE_TYPE" == "Major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$RELEASE_TYPE" == "Minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$RELEASE_TYPE" == "Patch" ]]; then
            patch=$((patch + 1))
          fi

          echo release-version="$major.$minor.$patch" >> $GITHUB_OUTPUT

      - name: Build the NuGet package
        env: 
          RELEASE_VERSION: ${{ steps.release-version.outputs.release-version }}
          RUN_NUMBER: ${{ github.run_number }}
        run: dotnet pack ./dotnet/Instaplus.Net/ -p:VersionPrefix="$RELEASE_VERSION" -p:VersionSuffix="rc.$RUN_NUMBER" --configuration Release --output ./output

      - name: Publish pre-release package to NuGet
        run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.INSTAPLUS_NUGET_APIKEY }} --source https://api.nuget.org/v3/index.json      

  # Job for Release Event (Published)
  repackage-and-publish-stable-release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: Production ## Marking the job as part of production environment which will make it needs a approval
    steps:
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      
      - name: Install NuGet CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y nuget

      - name: Get Latest Pre-Released Version
        id: versions
        run: |
          latest_version=$(dotnet package search Instaplus.Net --source nuget.org --prerelease --format json | \
          jq -r '.searchResult[].packages[] | select(.id == "Instaplus.Net") | .latestVersion')
          stable_version=${latest_version//-*/}

          echo latest-version="$latest_version" >> $GITHUB_OUTPUT
          echo stable-version="$stable_version" >> $GITHUB_OUTPUT
        
      - name: Download pre-release package
        env: 
          LATEST_PRE_RELEASE_VERSION: ${{ steps.versions.outputs.latest-version }}
        run: |
          curl -O "https://api.nuget.org/v3-flatcontainer/instaplus.net/$LATEST_PRE_RELEASE_VERSION/instaplus.net.$LATEST_PRE_RELEASE_VERSION.nupkg"

      - name: Repackage as a stable release
        env: 
          STABLE_VERSION: ${{ steps.versions.outputs.stable-version }}
        run: |
          mkdir package
          unzip instaplus.net.$LATEST_PRE_RELEASE_VERSION.nupkg -d ./package/
          nuget pack ./package/Instaplus.Net.nuspec -Version "$stable_version" -Properties Configuration=Release -OutputDirectory ./output

      - name: Publish stable package to NuGet
        run: dotnet nuget push ./output/*.nupkg --api-key ${{ secrets.INSTAPLUS_NUGET_APIKEY }} --source https://api.nuget.org/v3/index.json
